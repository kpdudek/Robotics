# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ar3/ar3_Feedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ar3_Feedback(genpy.Message):
  _md5sum = "89d9497c396e2b4e5491efb4741ef6f1"
  _type = "ar3/ar3_Feedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 eStop
int8 homed
int8 resting
int8 running
int8 gripper_closed

int64[6] encoder_pulses
float64[6] joint_angles
float64[6] setpoint_angles



"""
  __slots__ = ['eStop','homed','resting','running','gripper_closed','encoder_pulses','joint_angles','setpoint_angles']
  _slot_types = ['int8','int8','int8','int8','int8','int64[6]','float64[6]','float64[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       eStop,homed,resting,running,gripper_closed,encoder_pulses,joint_angles,setpoint_angles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ar3_Feedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.eStop is None:
        self.eStop = 0
      if self.homed is None:
        self.homed = 0
      if self.resting is None:
        self.resting = 0
      if self.running is None:
        self.running = 0
      if self.gripper_closed is None:
        self.gripper_closed = 0
      if self.encoder_pulses is None:
        self.encoder_pulses = [0] * 6
      if self.joint_angles is None:
        self.joint_angles = [0.] * 6
      if self.setpoint_angles is None:
        self.setpoint_angles = [0.] * 6
    else:
      self.eStop = 0
      self.homed = 0
      self.resting = 0
      self.running = 0
      self.gripper_closed = 0
      self.encoder_pulses = [0] * 6
      self.joint_angles = [0.] * 6
      self.setpoint_angles = [0.] * 6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5b().pack(_x.eStop, _x.homed, _x.resting, _x.running, _x.gripper_closed))
      buff.write(_get_struct_6q().pack(*self.encoder_pulses))
      buff.write(_get_struct_6d().pack(*self.joint_angles))
      buff.write(_get_struct_6d().pack(*self.setpoint_angles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.eStop, _x.homed, _x.resting, _x.running, _x.gripper_closed,) = _get_struct_5b().unpack(str[start:end])
      start = end
      end += 48
      self.encoder_pulses = _get_struct_6q().unpack(str[start:end])
      start = end
      end += 48
      self.joint_angles = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.setpoint_angles = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5b().pack(_x.eStop, _x.homed, _x.resting, _x.running, _x.gripper_closed))
      buff.write(self.encoder_pulses.tostring())
      buff.write(self.joint_angles.tostring())
      buff.write(self.setpoint_angles.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.eStop, _x.homed, _x.resting, _x.running, _x.gripper_closed,) = _get_struct_5b().unpack(str[start:end])
      start = end
      end += 48
      self.encoder_pulses = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=6)
      start = end
      end += 48
      self.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.setpoint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6q = None
def _get_struct_6q():
    global _struct_6q
    if _struct_6q is None:
        _struct_6q = struct.Struct("<6q")
    return _struct_6q
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_5b = None
def _get_struct_5b():
    global _struct_5b
    if _struct_5b is None:
        _struct_5b = struct.Struct("<5b")
    return _struct_5b
