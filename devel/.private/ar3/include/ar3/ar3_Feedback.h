// Generated by gencpp from file ar3/ar3_Feedback.msg
// DO NOT EDIT!


#ifndef AR3_MESSAGE_AR3_FEEDBACK_H
#define AR3_MESSAGE_AR3_FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ar3
{
template <class ContainerAllocator>
struct ar3_Feedback_
{
  typedef ar3_Feedback_<ContainerAllocator> Type;

  ar3_Feedback_()
    : eStop(0)
    , homed(0)
    , resting(0)
    , running(0)
    , gripper_closed(0)
    , encoder_pulses()
    , joint_angles()
    , setpoint_angles()  {
      encoder_pulses.assign(0);

      joint_angles.assign(0.0);

      setpoint_angles.assign(0.0);
  }
  ar3_Feedback_(const ContainerAllocator& _alloc)
    : eStop(0)
    , homed(0)
    , resting(0)
    , running(0)
    , gripper_closed(0)
    , encoder_pulses()
    , joint_angles()
    , setpoint_angles()  {
  (void)_alloc;
      encoder_pulses.assign(0);

      joint_angles.assign(0.0);

      setpoint_angles.assign(0.0);
  }



   typedef int8_t _eStop_type;
  _eStop_type eStop;

   typedef int8_t _homed_type;
  _homed_type homed;

   typedef int8_t _resting_type;
  _resting_type resting;

   typedef int8_t _running_type;
  _running_type running;

   typedef int8_t _gripper_closed_type;
  _gripper_closed_type gripper_closed;

   typedef boost::array<int64_t, 6>  _encoder_pulses_type;
  _encoder_pulses_type encoder_pulses;

   typedef boost::array<double, 6>  _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef boost::array<double, 6>  _setpoint_angles_type;
  _setpoint_angles_type setpoint_angles;





  typedef boost::shared_ptr< ::ar3::ar3_Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ar3::ar3_Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct ar3_Feedback_

typedef ::ar3::ar3_Feedback_<std::allocator<void> > ar3_Feedback;

typedef boost::shared_ptr< ::ar3::ar3_Feedback > ar3_FeedbackPtr;
typedef boost::shared_ptr< ::ar3::ar3_Feedback const> ar3_FeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ar3::ar3_Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ar3::ar3_Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ar3::ar3_Feedback_<ContainerAllocator1> & lhs, const ::ar3::ar3_Feedback_<ContainerAllocator2> & rhs)
{
  return lhs.eStop == rhs.eStop &&
    lhs.homed == rhs.homed &&
    lhs.resting == rhs.resting &&
    lhs.running == rhs.running &&
    lhs.gripper_closed == rhs.gripper_closed &&
    lhs.encoder_pulses == rhs.encoder_pulses &&
    lhs.joint_angles == rhs.joint_angles &&
    lhs.setpoint_angles == rhs.setpoint_angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ar3::ar3_Feedback_<ContainerAllocator1> & lhs, const ::ar3::ar3_Feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ar3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ar3::ar3_Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ar3::ar3_Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar3::ar3_Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar3::ar3_Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar3::ar3_Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar3::ar3_Feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ar3::ar3_Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89d9497c396e2b4e5491efb4741ef6f1";
  }

  static const char* value(const ::ar3::ar3_Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89d9497c396e2b4eULL;
  static const uint64_t static_value2 = 0x5491efb4741ef6f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ar3::ar3_Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ar3/ar3_Feedback";
  }

  static const char* value(const ::ar3::ar3_Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ar3::ar3_Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 eStop\n"
"int8 homed\n"
"int8 resting\n"
"int8 running\n"
"int8 gripper_closed\n"
"\n"
"int64[6] encoder_pulses\n"
"float64[6] joint_angles\n"
"float64[6] setpoint_angles\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::ar3::ar3_Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ar3::ar3_Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eStop);
      stream.next(m.homed);
      stream.next(m.resting);
      stream.next(m.running);
      stream.next(m.gripper_closed);
      stream.next(m.encoder_pulses);
      stream.next(m.joint_angles);
      stream.next(m.setpoint_angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ar3_Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ar3::ar3_Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ar3::ar3_Feedback_<ContainerAllocator>& v)
  {
    s << indent << "eStop: ";
    Printer<int8_t>::stream(s, indent + "  ", v.eStop);
    s << indent << "homed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.homed);
    s << indent << "resting: ";
    Printer<int8_t>::stream(s, indent + "  ", v.resting);
    s << indent << "running: ";
    Printer<int8_t>::stream(s, indent + "  ", v.running);
    s << indent << "gripper_closed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_closed);
    s << indent << "encoder_pulses[]" << std::endl;
    for (size_t i = 0; i < v.encoder_pulses.size(); ++i)
    {
      s << indent << "  encoder_pulses[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.encoder_pulses[i]);
    }
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "setpoint_angles[]" << std::endl;
    for (size_t i = 0; i < v.setpoint_angles.size(); ++i)
    {
      s << indent << "  setpoint_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.setpoint_angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AR3_MESSAGE_AR3_FEEDBACK_H
