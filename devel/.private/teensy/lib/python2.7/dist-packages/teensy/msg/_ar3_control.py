# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from teensy/ar3_control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ar3_control(genpy.Message):
  _md5sum = "9026d471c1270c3777015c75e131a561"
  _type = "teensy/ar3_control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 home
int8 run
int8 rest
int8 close_gripper

float64[6] joint_angles

"""
  __slots__ = ['home','run','rest','close_gripper','joint_angles']
  _slot_types = ['int8','int8','int8','int8','float64[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       home,run,rest,close_gripper,joint_angles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ar3_control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.home is None:
        self.home = 0
      if self.run is None:
        self.run = 0
      if self.rest is None:
        self.rest = 0
      if self.close_gripper is None:
        self.close_gripper = 0
      if self.joint_angles is None:
        self.joint_angles = [0.] * 6
    else:
      self.home = 0
      self.run = 0
      self.rest = 0
      self.close_gripper = 0
      self.joint_angles = [0.] * 6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4b().pack(_x.home, _x.run, _x.rest, _x.close_gripper))
      buff.write(_get_struct_6d().pack(*self.joint_angles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.home, _x.run, _x.rest, _x.close_gripper,) = _get_struct_4b().unpack(str[start:end])
      start = end
      end += 48
      self.joint_angles = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4b().pack(_x.home, _x.run, _x.rest, _x.close_gripper))
      buff.write(self.joint_angles.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.home, _x.run, _x.rest, _x.close_gripper,) = _get_struct_4b().unpack(str[start:end])
      start = end
      end += 48
      self.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_4b = None
def _get_struct_4b():
    global _struct_4b
    if _struct_4b is None:
        _struct_4b = struct.Struct("<4b")
    return _struct_4b
