// Generated by gencpp from file teensy/teensy_pulses.msg
// DO NOT EDIT!


#ifndef TEENSY_MESSAGE_TEENSY_PULSES_H
#define TEENSY_MESSAGE_TEENSY_PULSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teensy
{
template <class ContainerAllocator>
struct teensy_pulses_
{
  typedef teensy_pulses_<ContainerAllocator> Type;

  teensy_pulses_()
    : pulses()  {
      pulses.assign(0);
  }
  teensy_pulses_(const ContainerAllocator& _alloc)
    : pulses()  {
  (void)_alloc;
      pulses.assign(0);
  }



   typedef boost::array<int16_t, 6>  _pulses_type;
  _pulses_type pulses;





  typedef boost::shared_ptr< ::teensy::teensy_pulses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teensy::teensy_pulses_<ContainerAllocator> const> ConstPtr;

}; // struct teensy_pulses_

typedef ::teensy::teensy_pulses_<std::allocator<void> > teensy_pulses;

typedef boost::shared_ptr< ::teensy::teensy_pulses > teensy_pulsesPtr;
typedef boost::shared_ptr< ::teensy::teensy_pulses const> teensy_pulsesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teensy::teensy_pulses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teensy::teensy_pulses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teensy::teensy_pulses_<ContainerAllocator1> & lhs, const ::teensy::teensy_pulses_<ContainerAllocator2> & rhs)
{
  return lhs.pulses == rhs.pulses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teensy::teensy_pulses_<ContainerAllocator1> & lhs, const ::teensy::teensy_pulses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teensy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::teensy::teensy_pulses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teensy::teensy_pulses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teensy::teensy_pulses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teensy::teensy_pulses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teensy::teensy_pulses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teensy::teensy_pulses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teensy::teensy_pulses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb3b288c417a05835e02e94aae5e2865";
  }

  static const char* value(const ::teensy::teensy_pulses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb3b288c417a0583ULL;
  static const uint64_t static_value2 = 0x5e02e94aae5e2865ULL;
};

template<class ContainerAllocator>
struct DataType< ::teensy::teensy_pulses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teensy/teensy_pulses";
  }

  static const char* value(const ::teensy::teensy_pulses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teensy::teensy_pulses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[6] pulses\n"
;
  }

  static const char* value(const ::teensy::teensy_pulses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teensy::teensy_pulses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pulses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct teensy_pulses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teensy::teensy_pulses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teensy::teensy_pulses_<ContainerAllocator>& v)
  {
    s << indent << "pulses[]" << std::endl;
    for (size_t i = 0; i < v.pulses.size(); ++i)
    {
      s << indent << "  pulses[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.pulses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEENSY_MESSAGE_TEENSY_PULSES_H
