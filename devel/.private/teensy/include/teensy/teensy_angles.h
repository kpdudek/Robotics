// Generated by gencpp from file teensy/teensy_angles.msg
// DO NOT EDIT!


#ifndef TEENSY_MESSAGE_TEENSY_ANGLES_H
#define TEENSY_MESSAGE_TEENSY_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teensy
{
template <class ContainerAllocator>
struct teensy_angles_
{
  typedef teensy_angles_<ContainerAllocator> Type;

  teensy_angles_()
    : j1_angle(0.0)
    , j2_angle(0.0)
    , j3_angle(0.0)
    , j4_angle(0.0)
    , j5_angle(0.0)
    , j6_angle(0.0)  {
    }
  teensy_angles_(const ContainerAllocator& _alloc)
    : j1_angle(0.0)
    , j2_angle(0.0)
    , j3_angle(0.0)
    , j4_angle(0.0)
    , j5_angle(0.0)
    , j6_angle(0.0)  {
  (void)_alloc;
    }



   typedef double _j1_angle_type;
  _j1_angle_type j1_angle;

   typedef double _j2_angle_type;
  _j2_angle_type j2_angle;

   typedef double _j3_angle_type;
  _j3_angle_type j3_angle;

   typedef double _j4_angle_type;
  _j4_angle_type j4_angle;

   typedef double _j5_angle_type;
  _j5_angle_type j5_angle;

   typedef double _j6_angle_type;
  _j6_angle_type j6_angle;





  typedef boost::shared_ptr< ::teensy::teensy_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teensy::teensy_angles_<ContainerAllocator> const> ConstPtr;

}; // struct teensy_angles_

typedef ::teensy::teensy_angles_<std::allocator<void> > teensy_angles;

typedef boost::shared_ptr< ::teensy::teensy_angles > teensy_anglesPtr;
typedef boost::shared_ptr< ::teensy::teensy_angles const> teensy_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teensy::teensy_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teensy::teensy_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teensy::teensy_angles_<ContainerAllocator1> & lhs, const ::teensy::teensy_angles_<ContainerAllocator2> & rhs)
{
  return lhs.j1_angle == rhs.j1_angle &&
    lhs.j2_angle == rhs.j2_angle &&
    lhs.j3_angle == rhs.j3_angle &&
    lhs.j4_angle == rhs.j4_angle &&
    lhs.j5_angle == rhs.j5_angle &&
    lhs.j6_angle == rhs.j6_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teensy::teensy_angles_<ContainerAllocator1> & lhs, const ::teensy::teensy_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teensy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::teensy::teensy_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teensy::teensy_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teensy::teensy_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teensy::teensy_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teensy::teensy_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teensy::teensy_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teensy::teensy_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff3325ea44ea22847dec9013538e06aa";
  }

  static const char* value(const ::teensy::teensy_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff3325ea44ea2284ULL;
  static const uint64_t static_value2 = 0x7dec9013538e06aaULL;
};

template<class ContainerAllocator>
struct DataType< ::teensy::teensy_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teensy/teensy_angles";
  }

  static const char* value(const ::teensy::teensy_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teensy::teensy_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 j1_angle\n"
"float64 j2_angle\n"
"float64 j3_angle\n"
"float64 j4_angle\n"
"float64 j5_angle\n"
"float64 j6_angle\n"
;
  }

  static const char* value(const ::teensy::teensy_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teensy::teensy_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.j1_angle);
      stream.next(m.j2_angle);
      stream.next(m.j3_angle);
      stream.next(m.j4_angle);
      stream.next(m.j5_angle);
      stream.next(m.j6_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct teensy_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teensy::teensy_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teensy::teensy_angles_<ContainerAllocator>& v)
  {
    s << indent << "j1_angle: ";
    Printer<double>::stream(s, indent + "  ", v.j1_angle);
    s << indent << "j2_angle: ";
    Printer<double>::stream(s, indent + "  ", v.j2_angle);
    s << indent << "j3_angle: ";
    Printer<double>::stream(s, indent + "  ", v.j3_angle);
    s << indent << "j4_angle: ";
    Printer<double>::stream(s, indent + "  ", v.j4_angle);
    s << indent << "j5_angle: ";
    Printer<double>::stream(s, indent + "  ", v.j5_angle);
    s << indent << "j6_angle: ";
    Printer<double>::stream(s, indent + "  ", v.j6_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEENSY_MESSAGE_TEENSY_ANGLES_H
