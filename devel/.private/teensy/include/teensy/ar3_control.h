// Generated by gencpp from file teensy/ar3_control.msg
// DO NOT EDIT!


#ifndef TEENSY_MESSAGE_AR3_CONTROL_H
#define TEENSY_MESSAGE_AR3_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teensy
{
template <class ContainerAllocator>
struct ar3_control_
{
  typedef ar3_control_<ContainerAllocator> Type;

  ar3_control_()
    : home(0)
    , run(0)
    , rest(0)
    , close_gripper(0)
    , joint_angles()  {
      joint_angles.assign(0.0);
  }
  ar3_control_(const ContainerAllocator& _alloc)
    : home(0)
    , run(0)
    , rest(0)
    , close_gripper(0)
    , joint_angles()  {
  (void)_alloc;
      joint_angles.assign(0.0);
  }



   typedef int8_t _home_type;
  _home_type home;

   typedef int8_t _run_type;
  _run_type run;

   typedef int8_t _rest_type;
  _rest_type rest;

   typedef int8_t _close_gripper_type;
  _close_gripper_type close_gripper;

   typedef boost::array<double, 6>  _joint_angles_type;
  _joint_angles_type joint_angles;





  typedef boost::shared_ptr< ::teensy::ar3_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teensy::ar3_control_<ContainerAllocator> const> ConstPtr;

}; // struct ar3_control_

typedef ::teensy::ar3_control_<std::allocator<void> > ar3_control;

typedef boost::shared_ptr< ::teensy::ar3_control > ar3_controlPtr;
typedef boost::shared_ptr< ::teensy::ar3_control const> ar3_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teensy::ar3_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teensy::ar3_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teensy::ar3_control_<ContainerAllocator1> & lhs, const ::teensy::ar3_control_<ContainerAllocator2> & rhs)
{
  return lhs.home == rhs.home &&
    lhs.run == rhs.run &&
    lhs.rest == rhs.rest &&
    lhs.close_gripper == rhs.close_gripper &&
    lhs.joint_angles == rhs.joint_angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teensy::ar3_control_<ContainerAllocator1> & lhs, const ::teensy::ar3_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teensy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::teensy::ar3_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teensy::ar3_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teensy::ar3_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teensy::ar3_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teensy::ar3_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teensy::ar3_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teensy::ar3_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9026d471c1270c3777015c75e131a561";
  }

  static const char* value(const ::teensy::ar3_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9026d471c1270c37ULL;
  static const uint64_t static_value2 = 0x77015c75e131a561ULL;
};

template<class ContainerAllocator>
struct DataType< ::teensy::ar3_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teensy/ar3_control";
  }

  static const char* value(const ::teensy::ar3_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teensy::ar3_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 home\n"
"int8 run\n"
"int8 rest\n"
"int8 close_gripper\n"
"\n"
"float64[6] joint_angles\n"
"\n"
;
  }

  static const char* value(const ::teensy::ar3_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teensy::ar3_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.home);
      stream.next(m.run);
      stream.next(m.rest);
      stream.next(m.close_gripper);
      stream.next(m.joint_angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ar3_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teensy::ar3_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teensy::ar3_control_<ContainerAllocator>& v)
  {
    s << indent << "home: ";
    Printer<int8_t>::stream(s, indent + "  ", v.home);
    s << indent << "run: ";
    Printer<int8_t>::stream(s, indent + "  ", v.run);
    s << indent << "rest: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rest);
    s << indent << "close_gripper: ";
    Printer<int8_t>::stream(s, indent + "  ", v.close_gripper);
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEENSY_MESSAGE_AR3_CONTROL_H
